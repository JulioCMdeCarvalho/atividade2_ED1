{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red128\green128\blue0;\red192\green192\blue192;\red128\green128\blue64;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16  1  \cb3\cf17 #include <stdio.h>
\par \cb1\cf0\ul0\i0\b0  2  \cb3\cf17 #include <stdlib.h>
\par \cb1\cf0\ul0\i0\b0  3  \cb3\cf17 #include <locale.h>
\par \cb1\cf0\ul0\i0\b0  4  
\par \cb1\cf0\ul0\i0\b0  5  \cb3\cf4 /*
\par \cb1\cf0\ul0\i0\b0  6  \cb3\cf4 6. Faça um programa que simule ’virtualmente’
\par \cb1\cf0\ul0\i0\b0  7  \cb3\cf4 a memória de um computador: o usuário começa
\par \cb1\cf0\ul0\i0\b0  8  \cb3\cf4 especificando o tamanho da memória
\par \cb1\cf0\ul0\i0\b0  9  \cb3\cf4 (define quantos bytes tem a memória),
\par \cb1\cf0\ul0\i0\b0 10  \cb3\cf4 e depois ele irá ter 2 opções: inserir um dado
\par \cb1\cf0\ul0\i0\b0 11  \cb3\cf4 em um determinado endereço, ou consultar o dado contido
\par \cb1\cf0\ul0\i0\b0 12  \cb3\cf4 em um determinado endereço. A memória deve iniciar com todos
\par \cb1\cf0\ul0\i0\b0 13  \cb3\cf4 os dados zerados.
\par \cb1\cf0\ul0\i0\b0 14  \cb3\cf4 */
\par \cb1\cf0\ul0\i0\b0 15  
\par \cb1\cf0\ul0\i0\b0 16  \cb3\cf15\b int \b0\cb1\cf0 main\cb3\cf26 ()
\par \cb1\cf0\ul0\i0\b0 17  \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 18      \cb1\cf0 setlocale\cb3\cf26 (\cb1\cf0 LC_ALL\cb3\cf26 ,\cb3\cf21 ""\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 19  
\par \cb1\cf0\ul0\i0\b0 20      \cb3\cf15\b int \b0\cb1\cf0 tam_memoria\cb3\cf26 , \cb1\cf0 endereco\cb3\cf26 , \cb1\cf0 opcao\cb3\cf26 ,  \cb1\cf0 i\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 21      \cb3\cf15\b int \b0\cb1\cf0 controle \cb3\cf26 = \cb3\cf13 0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 22  
\par \cb1\cf0\ul0\i0\b0 23      \cb3\cf6 //criando a memoria
\par \cb1\cf0\ul0\i0\b0 24      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "Defina o tamanho da memória: \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 25      \cb1\cf0 scanf\cb3\cf26 (\cb3\cf21 "%d"\cb3\cf26 , &\cb1\cf0 tam_memoria\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 26  
\par \cb1\cf0\ul0\i0\b0 27      \cb3\cf15\b int \b0\cb3\cf26 *\cb1\cf0 vetor_memoria\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 28      \cb1\cf0 vetor_memoria \cb3\cf26 = (\cb3\cf15\b int\b0\cb3\cf26 *)\cb1\cf0 calloc\cb3\cf26 (\cb1\cf0 tam_memoria\cb3\cf26 , \cb3\cf15\b sizeof\b0\cb3\cf26 (\cb3\cf15\b int\b0\cb3\cf26 ));
\par \cb1\cf0\ul0\i0\b0 29  
\par \cb1\cf0\ul0\i0\b0 30      \cb3\cf6 //imprimindo o estado atual da memoria
\par \cb1\cf0\ul0\i0\b0 31      \cb3\cf15\b for\b0\cb3\cf26 (\cb1\cf0 i\cb3\cf26 =\cb3\cf13 0\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 <\cb1\cf0 tam_memoria\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 ++)\{
\par \cb1\cf0\ul0\i0\b0 32          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n %d \\n"\cb3\cf26 , \cb1\cf0 vetor_memoria\cb3\cf26 [\cb1\cf0 i\cb3\cf26 ]);
\par \cb1\cf0\ul0\i0\b0 33      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 34  
\par \cb1\cf0\ul0\i0\b0 35      \cb3\cf15\b if\b0\cb3\cf26 (\cb1\cf0 vetor_memoria \cb3\cf26 == \cb1\cf0 NULL\cb3\cf26 )\{
\par \cb1\cf0\ul0\i0\b0 36          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Erro de alocacao de memoria \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 37          \cb1\cf0 exit\cb3\cf26 (\cb3\cf13 1\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 38      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 39      \cb3\cf15\b while\b0\cb3\cf26 (\cb1\cf0 controle \cb3\cf26 == \cb3\cf13 0\cb3\cf26 )\{
\par \cb1\cf0\ul0\i0\b0 40          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Lista de opções: \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 41          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n 1 - Inserir um dado em um determinado endereço. \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 42          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n 2 - Consultar o dado contido em um determinado endereço. \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 43          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n 3 - Sair \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 44          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "Escolha uma opção: \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 45          \cb1\cf0 scanf\cb3\cf26 (\cb3\cf21 "%d"\cb3\cf26 , &\cb1\cf0 opcao\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 46          \cb3\cf15\b if \b0\cb3\cf26 (\cb1\cf0 opcao \cb3\cf26 == \cb3\cf13 1\cb3\cf26 )\{
\par \cb1\cf0\ul0\i0\b0 47              \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Entre com o endereco onde quer inserir o dado : "\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 48              \cb1\cf0 scanf\cb3\cf26 (\cb3\cf21 "%d"\cb3\cf26 , &\cb1\cf0 endereco\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 49              \cb3\cf15\b for\b0\cb3\cf26 (\cb1\cf0 i\cb3\cf26 =\cb3\cf13 0\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 <\cb1\cf0 tam_memoria\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 ++)\{
\par \cb1\cf0\ul0\i0\b0 50                  \cb3\cf15\b if\b0\cb3\cf26 (\cb1\cf0 i \cb3\cf26 == \cb1\cf0 endereco\cb3\cf26 )\{
\par \cb1\cf0\ul0\i0\b0 51                      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Entre com o valor inteiro para o índice %d: "\cb3\cf26 , \cb1\cf0 i\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 52                      \cb1\cf0 scanf\cb3\cf26 (\cb3\cf21 "%d"\cb3\cf26 , &\cb1\cf0 vetor_memoria\cb3\cf26 [\cb1\cf0 i\cb3\cf26 ]);
\par \cb1\cf0\ul0\i0\b0 53                  \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 54              \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 55              \cb3\cf6 //lista o conteudo existentes na memoria:
\par \cb1\cf0\ul0\i0\b0 56              \cb3\cf15\b for\b0\cb3\cf26 (\cb1\cf0 i\cb3\cf26 =\cb3\cf13 0\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 <\cb3\cf13 1\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 ++)\{
\par \cb1\cf0\ul0\i0\b0 57                  \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n MEMORIA: "\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 58                  \cb3\cf15\b for\b0\cb3\cf26 (\cb1\cf0 i\cb3\cf26 =\cb3\cf13 0\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 <\cb1\cf0 tam_memoria\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 ++)\{
\par \cb1\cf0\ul0\i0\b0 59                      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Conteúdo atual do índice %d: %d \\n"\cb3\cf26 , \cb1\cf0 i\cb3\cf26 , \cb1\cf0 vetor_memoria\cb3\cf26 [\cb1\cf0 i\cb3\cf26 ]);
\par \cb1\cf0\ul0\i0\b0 60                  \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 61              \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 62          \cb3\cf26 \}\cb3\cf15\b else if \b0\cb3\cf26 (\cb1\cf0 opcao \cb3\cf26 == \cb3\cf13 2\cb3\cf26 )\{
\par \cb1\cf0\ul0\i0\b0 63              \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "Digite o endereco do dado a ser consultado na sua memoria: \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 64              \cb1\cf0 scanf\cb3\cf26 (\cb3\cf21 "%d"\cb3\cf26 , &\cb1\cf0 endereco\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 65              \cb3\cf15\b for\b0\cb3\cf26 (\cb1\cf0 i\cb3\cf26 =\cb3\cf13 0\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 <\cb1\cf0 tam_memoria\cb3\cf26 ;\cb1\cf0 i\cb3\cf26 ++)\{
\par \cb1\cf0\ul0\i0\b0 66                  \cb3\cf15\b if\b0\cb3\cf26 (\cb1\cf0 i \cb3\cf26 == \cb1\cf0 endereco\cb3\cf26 )\{
\par \cb1\cf0\ul0\i0\b0 67                      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 " \\n Dado contido no endereco %d : %d \\n"\cb3\cf26 , \cb1\cf0 i\cb3\cf26 , \cb1\cf0 vetor_memoria\cb3\cf26 [\cb1\cf0 i\cb3\cf26 ]);
\par \cb1\cf0\ul0\i0\b0 68                  \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 69              \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 70          \cb3\cf26 \}\cb3\cf15\b else if\b0\cb3\cf26 (\cb1\cf0 opcao \cb3\cf26 == \cb3\cf13 3\cb3\cf26 )\{
\par \cb1\cf0\ul0\i0\b0 71              \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Você saiu \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 72              \cb1\cf0 controle \cb3\cf26 = \cb3\cf13 1\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 73          \cb3\cf26 \}\cb3\cf15\b else\b0\cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 74              \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Opção inválida. \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 75              \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Você saiu \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 76              \cb1\cf0 controle \cb3\cf26 = \cb3\cf13 1\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 77          \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 78      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 79  
\par \cb1\cf0\ul0\i0\b0 80      \cb1\cf0 free\cb3\cf26 (\cb1\cf0 vetor_memoria\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 81  \cb3\cf26 \}
\par }