{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red128\green128\blue0;\red192\green192\blue192;\red128\green128\blue64;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16   1  \cb3\cf4 /*
\par \cb1\cf0\ul0\i0\b0   2  \cb3\cf4 11. O código abaixo implementa parte de uma agenda de telefones bem simples.
\par \cb1\cf0\ul0\i0\b0   3  \cb3\cf4 Cada registro da agenda (contato) é composto apenas de nome e telefone.
\par \cb1\cf0\ul0\i0\b0   4  \cb3\cf4 O usuário poderá inserir, remover ou listar os contatos que serão mantidos
\par \cb1\cf0\ul0\i0\b0   5  \cb3\cf4 em um vetor de ponteiros de contatos, alocado dinamicamente. Pede-se:
\par \cb1\cf0\ul0\i0\b0   6  
\par \cb1\cf0\ul0\i0\b0   7  \cb3\cf4 a. Implementar a função inic_agenda() que inicializa a agenda,
\par \cb1\cf0\ul0\i0\b0   8  \cb3\cf4 alocando um espaço inicial em memória para BLOCK ponteiros
\par \cb1\cf0\ul0\i0\b0   9  \cb3\cf4 de contatos.
\par \cb1\cf0\ul0\i0\b0  10  
\par \cb1\cf0\ul0\i0\b0  11  \cb3\cf4 b. Implementar a função insere() que insere um contato
\par \cb1\cf0\ul0\i0\b0  12  \cb3\cf4 fornecido pelo usuário. Lembrar que tal função deve verificar se
\par \cb1\cf0\ul0\i0\b0  13  \cb3\cf4 o espaço de memória alocado para os ponteiros de contatos
\par \cb1\cf0\ul0\i0\b0  14  \cb3\cf4 será esgotado com a inserção do novo contato, devendo reajusta-lo,
\par \cb1\cf0\ul0\i0\b0  15  \cb3\cf4 se necessário, em incrementos de tamanho BLOCK.
\par \cb1\cf0\ul0\i0\b0  16  
\par \cb1\cf0\ul0\i0\b0  17  \cb3\cf4 c. Fazer o rastreio da função deleta(), mostrando o que
\par \cb1\cf0\ul0\i0\b0  18  \cb3\cf4 ocorre se o usuário optar por deletar o terceiro registro
\par \cb1\cf0\ul0\i0\b0  19  \cb3\cf4 de uma agenda com os cinco registros abaixo:
\par \cb1\cf0\ul0\i0\b0  20  
\par \cb1\cf0\ul0\i0\b0  21  \cb3\cf4 Maria   2222-2222
\par \cb1\cf0\ul0\i0\b0  22  \cb3\cf4 José    3333-3333
\par \cb1\cf0\ul0\i0\b0  23  \cb3\cf4 Danilo  4444-4444
\par \cb1\cf0\ul0\i0\b0  24  \cb3\cf4 Carla   5555-5555
\par \cb1\cf0\ul0\i0\b0  25  \cb3\cf4 João    6666-6666
\par \cb1\cf0\ul0\i0\b0  26  
\par \cb1\cf0\ul0\i0\b0  27  \cb3\cf4 */
\par \cb1\cf0\ul0\i0\b0  28  
\par \cb1\cf0\ul0\i0\b0  29  \cb3\cf17 #include <stdio.h>
\par \cb1\cf0\ul0\i0\b0  30  \cb3\cf17 #include <stdlib.h>
\par \cb1\cf0\ul0\i0\b0  31  \cb3\cf17 #define MAX 3 \cb3\cf6 //numero máximo de BLOCKs que podem ser alocados
\par \cb1\cf0\ul0\i0\b0  32  \cb3\cf17 #define BLOCK 5
\par \cb1\cf0\ul0\i0\b0  33  
\par \cb1\cf0\ul0\i0\b0  34  \cb3\cf4 /*
\par \cb1\cf0\ul0\i0\b0  35  \cb3\cf4 realloc ok
\par \cb1\cf0\ul0\i0\b0  36  
\par \cb1\cf0\ul0\i0\b0  37  \cb3\cf4 */
\par \cb1\cf0\ul0\i0\b0  38  
\par \cb1\cf0\ul0\i0\b0  39  \cb3\cf15\b typedef struct \b0\cb1\cf0 _contato\cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0  40      \cb3\cf15\b char \b0\cb1\cf0 nome\cb3\cf26 [\cb3\cf13 30\cb3\cf26 ];
\par \cb1\cf0\ul0\i0\b0  41      \cb3\cf15\b char \b0\cb1\cf0 tel\cb3\cf26 [\cb3\cf13 8\cb3\cf26 ];
\par \cb1\cf0\ul0\i0\b0  42  \cb3\cf26 \}\cb1\cf0 contato\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  43  
\par \cb1\cf0\ul0\i0\b0  44  \cb1\cf0 contato \cb3\cf26 **\cb1\cf0 agenda\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  45  \cb3\cf15\b int \b0\cb1\cf0 num_contatos \cb3\cf26 = \cb3\cf13 0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  46  \cb3\cf15\b int \b0\cb1\cf0 num_blocos \cb3\cf26 = \cb3\cf13 0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  47  \cb3\cf15\b void \b0\cb1\cf0 inic_agenda\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0  48  \cb3\cf15\b void \b0\cb1\cf0 insere\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0  49  \cb3\cf15\b void \b0\cb1\cf0 deleta\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0  50  \cb3\cf15\b void \b0\cb1\cf0 lista\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0  51  \cb3\cf15\b int \b0\cb1\cf0 item_menu\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0  52  
\par \cb1\cf0\ul0\i0\b0  53  \cb3\cf15\b int \b0\cb1\cf0 main\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0  54  \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0  55      \cb3\cf15\b int \b0\cb1\cf0 item\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  56      \cb1\cf0 inic_agenda\cb3\cf26 ();
\par \cb1\cf0\ul0\i0\b0  57      \cb3\cf15\b for\b0\cb3\cf26 (;;)
\par \cb1\cf0\ul0\i0\b0  58      \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0  59          \cb1\cf0 item \cb3\cf26 = \cb1\cf0 item_menu\cb3\cf26 ();
\par \cb1\cf0\ul0\i0\b0  60          \cb3\cf15\b switch\b0\cb3\cf26 (\cb1\cf0 item\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0  61          \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0  62          \cb3\cf15\b case \b0\cb3\cf13 1\cb3\cf26 :
\par \cb1\cf0\ul0\i0\b0  63              \cb1\cf0 insere\cb3\cf26 ();
\par \cb1\cf0\ul0\i0\b0  64              \cb3\cf15\b break\b0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  65          \cb3\cf15\b case \b0\cb3\cf13 2\cb3\cf26 :
\par \cb1\cf0\ul0\i0\b0  66              \cb1\cf0 deleta\cb3\cf26 ();
\par \cb1\cf0\ul0\i0\b0  67              \cb3\cf15\b break\b0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  68          \cb3\cf15\b case \b0\cb3\cf13 3\cb3\cf26 :
\par \cb1\cf0\ul0\i0\b0  69              \cb1\cf0 lista\cb3\cf26 ();
\par \cb1\cf0\ul0\i0\b0  70              \cb3\cf15\b break\b0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  71          \cb3\cf15\b case \b0\cb3\cf13 4\cb3\cf26 :
\par \cb1\cf0\ul0\i0\b0  72              \cb1\cf0 exit\cb3\cf26 (\cb3\cf13 0\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0  73          \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0  74      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0  75  \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0  76  
\par \cb1\cf0\ul0\i0\b0  77  \cb3\cf6 //letra a
\par \cb1\cf0\ul0\i0\b0  78  \cb3\cf6 //Inicializa a agenda
\par \cb1\cf0\ul0\i0\b0  79  \cb3\cf15\b void \b0\cb1\cf0 inic_agenda\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0  80  \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0  81      \cb1\cf0 agenda \cb3\cf26 = (\cb1\cf0 contato \cb3\cf26 **)\cb1\cf0 malloc\cb3\cf26 (\cb1\cf0 BLOCK\cb3\cf26 *\cb3\cf15\b sizeof\b0\cb3\cf26 (\cb1\cf0 contato\cb3\cf26 *));
\par \cb1\cf0\ul0\i0\b0  82  \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0  83  
\par \cb1\cf0\ul0\i0\b0  84  \cb3\cf6 //letra b
\par \cb1\cf0\ul0\i0\b0  85  \cb3\cf6 //Insere um novo contato
\par \cb1\cf0\ul0\i0\b0  86  \cb3\cf15\b void \b0\cb1\cf0 insere\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0  87  \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0  88      \cb3\cf15\b if\b0\cb3\cf26 ((\cb1\cf0 num_contatos \cb3\cf26 != \cb3\cf13 0\cb3\cf26 ) &&((\cb1\cf0 num_contatos\cb3\cf26 %\cb1\cf0 BLOCK\cb3\cf26 ) == \cb3\cf13 0\cb3\cf26 ))
\par \cb1\cf0\ul0\i0\b0  89      \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0  90          \cb3\cf15\b if \b0\cb3\cf26 (\cb1\cf0 num_blocos \cb3\cf26 >= \cb1\cf0 MAX\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0  91          \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0  92              \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Agenda cheia \\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0  93              \cb3\cf15\b return\b0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0  94          \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0  95          \cb1\cf0 agenda \cb3\cf26 = (\cb1\cf0 contato \cb3\cf26 **)\cb1\cf0 realloc\cb3\cf26 (\cb1\cf0 agenda\cb3\cf26 ,(\cb1\cf0 num_blocos \cb3\cf26 + \cb3\cf13 1\cb3\cf26 ) * \cb1\cf0 BLOCK \cb3\cf26 * (\cb3\cf15\b sizeof\b0\cb3\cf26 (\cb1\cf0 contato\cb3\cf26 *)));
\par \cb1\cf0\ul0\i0\b0  96          \cb1\cf0 num_blocos\cb3\cf26 ++;
\par \cb1\cf0\ul0\i0\b0  97      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0  98      \cb1\cf0 agenda\cb3\cf26 [\cb1\cf0 num_contatos\cb3\cf26 ]= (\cb1\cf0 contato\cb3\cf26 *) \cb1\cf0 malloc\cb3\cf26 (\cb3\cf15\b sizeof\b0\cb3\cf26 (\cb1\cf0 contato\cb3\cf26 ));
\par \cb1\cf0\ul0\i0\b0  99      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n Entre com o nome: "\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 100      \cb1\cf0 gets\cb3\cf26 (\cb1\cf0 agenda\cb3\cf26 [\cb1\cf0 num_contatos\cb3\cf26 ]->\cb1\cf0 nome\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 101      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "Entre com o tel: "\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 102      \cb1\cf0 gets\cb3\cf26 (\cb1\cf0 agenda\cb3\cf26 [\cb1\cf0 num_contatos\cb3\cf26 ]->\cb1\cf0 tel\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 103      \cb1\cf0 num_contatos\cb3\cf26 ++;
\par \cb1\cf0\ul0\i0\b0 104  \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 105  
\par \cb1\cf0\ul0\i0\b0 106  
\par \cb1\cf0\ul0\i0\b0 107  \cb3\cf4 /* Retorna item de menu selecionado*/
\par \cb1\cf0\ul0\i0\b0 108  \cb3\cf15\b int \b0\cb1\cf0 item_menu\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0 109  \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 110      \cb3\cf15\b char \b0\cb1\cf0 s\cb3\cf26 [\cb3\cf13 80\cb3\cf26 ];
\par \cb1\cf0\ul0\i0\b0 111      \cb3\cf15\b int \b0\cb1\cf0 c\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 112      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 113      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "1. Inserir um contato\\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 114      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "2. Excluir um contato\\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 115      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "3. Listar contatos\\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 116      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "4. Sair\\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 117  
\par \cb1\cf0\ul0\i0\b0 118      \cb3\cf15\b do
\par \cb1\cf0\ul0\i0\b0 119      \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 120          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\nEntre com sua escolha: "\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 121          \cb1\cf0 gets\cb3\cf26 (\cb1\cf0 s\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 122          \cb1\cf0 c \cb3\cf26 = \cb1\cf0 atoi\cb3\cf26 (\cb1\cf0 s\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 123      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 124      \cb3\cf15\b while\b0\cb3\cf26 (\cb1\cf0 c\cb3\cf26 <\cb3\cf13 0 \cb3\cf26 || \cb1\cf0 c\cb3\cf26 >\cb3\cf13 4\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 125  
\par \cb1\cf0\ul0\i0\b0 126      \cb3\cf15\b return \b0\cb1\cf0 c\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 127  \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 128  
\par \cb1\cf0\ul0\i0\b0 129  \cb3\cf4 /*
\par \cb1\cf0\ul0\i0\b0 130  \cb3\cf4 letra c
\par \cb1\cf0\ul0\i0\b0 131  \cb3\cf4 Quando contato for excluido o ultimo contado da lista passa a ocupar seu lugar.
\par \cb1\cf0\ul0\i0\b0 132  \cb3\cf4 */
\par \cb1\cf0\ul0\i0\b0 133  
\par \cb1\cf0\ul0\i0\b0 134  \cb3\cf4 /* Apaga um contato */
\par \cb1\cf0\ul0\i0\b0 135  \cb3\cf15\b void \b0\cb1\cf0 deleta\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0 136  \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 137      \cb3\cf15\b int \b0\cb1\cf0 indice\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 138      \cb3\cf15\b char \b0\cb1\cf0 s\cb3\cf26 [\cb3\cf13 10\cb3\cf26 ];
\par \cb1\cf0\ul0\i0\b0 139  
\par \cb1\cf0\ul0\i0\b0 140      \cb3\cf15\b if \b0\cb3\cf26 (\cb1\cf0 num_contatos \cb3\cf26 ==\cb3\cf13 0\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0 141      \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 142          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\nAgenda vazia\\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 143          \cb3\cf15\b return\b0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 144      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 145      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\nEntre com o no. do contato: "\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 146      \cb1\cf0 gets\cb3\cf26 (\cb1\cf0 s\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 147      \cb1\cf0 indice \cb3\cf26 = \cb1\cf0 atoi\cb3\cf26 (\cb1\cf0 s\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 148      \cb1\cf0 free\cb3\cf26 (\cb1\cf0 agenda\cb3\cf26 [\cb1\cf0 indice\cb3\cf26 -\cb3\cf13 1\cb3\cf26 ]);
\par \cb1\cf0\ul0\i0\b0 149      \cb1\cf0 agenda\cb3\cf26 [\cb1\cf0 indice\cb3\cf26 -\cb3\cf13 1\cb3\cf26 ] = \cb1\cf0 agenda\cb3\cf26 [\cb1\cf0 num_contatos \cb3\cf26 -\cb3\cf13 1\cb3\cf26 ];
\par \cb1\cf0\ul0\i0\b0 150      \cb1\cf0 num_contatos\cb3\cf26 --;
\par \cb1\cf0\ul0\i0\b0 151  
\par \cb1\cf0\ul0\i0\b0 152      \cb3\cf15\b if \b0\cb3\cf26 (\cb1\cf0 num_contatos\cb3\cf26 <(\cb1\cf0 num_blocos \cb3\cf26 * \cb1\cf0 BLOCK\cb3\cf26 ))
\par \cb1\cf0\ul0\i0\b0 153      \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 154          \cb1\cf0 agenda \cb3\cf26 =(\cb1\cf0 contato \cb3\cf26 **)\cb1\cf0 realloc\cb3\cf26 (\cb1\cf0 agenda\cb3\cf26 ,(\cb1\cf0 num_blocos \cb3\cf26 - \cb3\cf13 1\cb3\cf26 )*\cb3\cf15\b sizeof\b0\cb3\cf26 (\cb1\cf0 contato \cb3\cf26 *));
\par \cb1\cf0\ul0\i0\b0 155      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 156  \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 157  
\par \cb1\cf0\ul0\i0\b0 158  \cb3\cf4 /* Mostra a lista de contatos na tela. */
\par \cb1\cf0\ul0\i0\b0 159  \cb3\cf15\b void \b0\cb1\cf0 lista\cb3\cf26 (\cb3\cf15\b void\b0\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0 160  \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 161      \cb3\cf15\b int \b0\cb1\cf0 t\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 162      \cb3\cf15\b if \b0\cb3\cf26 (\cb1\cf0 num_contatos \cb3\cf26 ==\cb3\cf13 0\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0 163      \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 164          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\nAgenda vazia\\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 165          \cb3\cf15\b return\b0\cb3\cf26 ;
\par \cb1\cf0\ul0\i0\b0 166      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 167      \cb3\cf15\b for\b0\cb3\cf26 (\cb1\cf0 t\cb3\cf26 =\cb3\cf13 0\cb3\cf26 ; \cb1\cf0 t\cb3\cf26 <\cb1\cf0 num_contatos\cb3\cf26 ; ++\cb1\cf0 t\cb3\cf26 )
\par \cb1\cf0\ul0\i0\b0 168      \cb3\cf26 \{
\par \cb1\cf0\ul0\i0\b0 169          \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "(%d) %s %s\\n"\cb3\cf26 , \cb1\cf0 t\cb3\cf26 +\cb3\cf13 1\cb3\cf26 , \cb1\cf0 agenda\cb3\cf26 [\cb1\cf0 t\cb3\cf26 ]->\cb1\cf0 nome\cb3\cf26 , \cb1\cf0 agenda\cb3\cf26 [\cb1\cf0 t\cb3\cf26 ]->\cb1\cf0 tel\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 170      \cb3\cf26 \}
\par \cb1\cf0\ul0\i0\b0 171      \cb1\cf0 printf\cb3\cf26 (\cb3\cf21 "\\n\\n"\cb3\cf26 );
\par \cb1\cf0\ul0\i0\b0 172  \cb3\cf26 \}
\par }